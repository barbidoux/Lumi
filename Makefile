# Makefile pour l'entra√Ænement d'un mini-LLM
# Commandes pr√™tes √† l'emploi pour chaque phase du pipeline

# Variables par d√©faut
PYTHON := python
ACCELERATE := accelerate launch
DATA_DIR := ./data
CONFIG_DIR := ./config
SCRIPTS_DIR := ./scripts
CHECKPOINTS_DIR := ./checkpoints
EVALUATION_DIR := ./evaluation
SESSION_DIR := ./sessions

# Configuration des sessions
SESSION_TIME ?= auto
SESSION_NAME ?= $(shell date +%Y%m%d_%H%M%S)
SESSION_LOG := $(SESSION_DIR)/$(SESSION_NAME).log

# Datasets par d√©faut
RAW_DATASET := openwebtext
PROCESSED_DATA := $(DATA_DIR)/processed/tokenized_data.json
SFT_DATASET := $(DATA_DIR)/sft_dataset.json
DPO_DATASET := $(DATA_DIR)/dpo_dataset.json

# Configurations de mod√®le
TINY_CONFIG := $(CONFIG_DIR)/tiny.json
SMALL_CONFIG := $(CONFIG_DIR)/small.json
BASE_CONFIG := $(CONFIG_DIR)/base.json
SFT_CONFIG := $(CONFIG_DIR)/sft.json

# Aide
.PHONY: help
help:
	@echo "ü§ñ Makefile pour l'entra√Ænement d'un mini-LLM"
	@echo ""
	@echo "üìö SESSIONS DE D√âVELOPPEMENT (courtes et focalis√©es):"
	@echo "  session-quick        - Session 30min: test rapide du pipeline"
	@echo "  session-prototype    - Session 2h: prototype avec tiny model"
	@echo "  session-experiment   - Session 4h: exp√©rimentation avec small model"
	@echo "  session-evaluation   - Session 1h: √©valuation et analyse"
	@echo "  session-debug        - Session interactive de debug"
	@echo "  session-architecture - Validation de l'architecture"
	@echo ""
	@echo "üöÄ COMMANDES PRINCIPALES:"
	@echo "  install              - Installe les d√©pendances"
	@echo "  prepare              - Pr√©pare les donn√©es d'entra√Ænement"
	@echo "  pretrain-tiny        - Lance le pr√©-entra√Ænement du mod√®le tiny"
	@echo "  pretrain-small       - Lance le pr√©-entra√Ænement du mod√®le small"
	@echo "  pretrain-base        - Lance le pr√©-entra√Ænement du mod√®le base"
	@echo "  sft                  - Lance le fine-tuning supervis√©"
	@echo "  dpo                  - Lance l'alignement DPO"
	@echo ""
	@echo "üìä √âVALUATION ET ANALYSE:"
	@echo "  evaluate             - √âvaluation compl√®te"
	@echo "  evaluate-quick       - √âvaluation rapide pour d√©veloppement"
	@echo "  assess-performance   - Analyse automatique des performances"
	@echo "  validate-architecture - Validation de la configuration"
	@echo ""
	@echo "üéØ INF√âRENCE ET SERVICES:"
	@echo "  serve                - Lance l'interface interactive"
	@echo "  serve-api            - Lance le serveur API"
	@echo ""
	@echo "üîß MAINTENANCE:"
	@echo "  clean                - Nettoie les fichiers temporaires"
	@echo "  clean-checkpoints    - Supprime tous les checkpoints"
	@echo "  backup               - Sauvegarde configs et mod√®les"
	@echo "  monitor              - Surveillance des ressources"
	@echo ""
	@echo "‚öôÔ∏è Variables configurables:"
	@echo "  RAW_DATASET         - Dataset brut √† utiliser (d√©faut: openwebtext)"
	@echo "  SFT_DATASET         - Dataset pour SFT (d√©faut: $(SFT_DATASET))"
	@echo "  DPO_DATASET         - Dataset pour DPO (d√©faut: $(DPO_DATASET))
  MODEL_PATH          - Chemin du mod√®le pour √©valuation
  CONFIG              - Configuration √† valider"
	@echo "  SESSION_TIME        - Temps de session en minutes (d√©faut: auto)"

# Installation des d√©pendances
.PHONY: install
install:
	@echo "Installation des d√©pendances..."
	pip install -r requirements.txt
	@echo "D√©pendances install√©es avec succ√®s!"

# Pr√©paration des donn√©es
.PHONY: prepare
prepare:
	@echo "Pr√©paration des donn√©es d'entra√Ænement..."
	@mkdir -p $(DATA_DIR)/processed
	$(PYTHON) $(SCRIPTS_DIR)/01_prepare_data.py \
		--input_path $(RAW_DATASET) \
		--output_dir $(DATA_DIR)/processed \
		--vocab_size 32768 \
		--min_length 50 \
		--max_length 10000
	@echo "Donn√©es pr√©par√©es dans $(DATA_DIR)/processed"

# Pr√©-entra√Ænement mod√®le tiny
.PHONY: pretrain-tiny
pretrain-tiny:
	@echo "Lancement du pr√©-entra√Ænement du mod√®le tiny..."
	@mkdir -p $(CHECKPOINTS_DIR)/pretrain/tiny
	$(ACCELERATE) $(SCRIPTS_DIR)/02_pretrain.py \
		--config $(TINY_CONFIG) \
		--data_path $(PROCESSED_DATA) \
		--output_dir $(CHECKPOINTS_DIR)/pretrain/tiny \
		--learning_rate 3e-4 \
		--batch_size 16 \
		--gradient_accumulation_steps 4 \
		--num_train_epochs 1 \
		--warmup_steps 1000 \
		--save_steps 2000 \
		--logging_steps 50
	@echo "Pr√©-entra√Ænement tiny termin√©!"

# Pr√©-entra√Ænement mod√®le small
.PHONY: pretrain-small
pretrain-small:
	@echo "Lancement du pr√©-entra√Ænement du mod√®le small..."
	@mkdir -p $(CHECKPOINTS_DIR)/pretrain/small
	$(ACCELERATE) $(SCRIPTS_DIR)/02_pretrain.py \
		--config $(SMALL_CONFIG) \
		--data_path $(PROCESSED_DATA) \
		--output_dir $(CHECKPOINTS_DIR)/pretrain/small \
		--learning_rate 3e-4 \
		--batch_size 8 \
		--gradient_accumulation_steps 8 \
		--num_train_epochs 1 \
		--warmup_steps 2000 \
		--save_steps 5000 \
		--logging_steps 100
	@echo "Pr√©-entra√Ænement small termin√©!"

# Pr√©-entra√Ænement mod√®le base
.PHONY: pretrain-base
pretrain-base:
	@echo "Lancement du pr√©-entra√Ænement du mod√®le base..."
	@mkdir -p $(CHECKPOINTS_DIR)/pretrain/base
	$(ACCELERATE) $(SCRIPTS_DIR)/02_pretrain.py \
		--config $(BASE_CONFIG) \
		--data_path $(PROCESSED_DATA) \
		--output_dir $(CHECKPOINTS_DIR)/pretrain/base \
		--learning_rate 2e-4 \
		--batch_size 4 \
		--gradient_accumulation_steps 16 \
		--num_train_epochs 1 \
		--warmup_steps 4000 \
		--save_steps 10000 \
		--logging_steps 200
	@echo "Pr√©-entra√Ænement base termin√©!"

# Fine-tuning supervis√©
.PHONY: sft
sft:
	@echo "Lancement du fine-tuning supervis√©..."
	@mkdir -p $(CHECKPOINTS_DIR)/sft
	$(PYTHON) $(SCRIPTS_DIR)/03_sft.py \
		--model_path $(CHECKPOINTS_DIR)/pretrain/tiny/final \
		--dataset_path $(SFT_DATASET) \
		--config_path $(SFT_CONFIG) \
		--output_dir $(CHECKPOINTS_DIR)/sft
	@echo "Fine-tuning supervis√© termin√©!"

# Alignement DPO
.PHONY: dpo
dpo:
	@echo "Lancement de l'alignement DPO..."
	@mkdir -p $(CHECKPOINTS_DIR)/dpo
	$(PYTHON) $(SCRIPTS_DIR)/04_dpo.py \
		--model_path $(CHECKPOINTS_DIR)/sft \
		--dataset_path $(DPO_DATASET) \
		--output_dir $(CHECKPOINTS_DIR)/dpo \
		--beta 0.1 \
		--learning_rate 5e-7 \
		--batch_size 2 \
		--gradient_accumulation_steps 8 \
		--num_train_epochs 1 \
		--max_length 1024
	@echo "Alignement DPO termin√©!"

# √âvaluation
.PHONY: evaluate
evaluate:
	@echo "√âvaluation du mod√®le final..."
	@mkdir -p ./evaluation_results
	$(PYTHON) $(SCRIPTS_DIR)/05_evaluate.py \
		--model_path $(CHECKPOINTS_DIR)/dpo \
		--output_dir ./evaluation_results \
		--max_boolq_samples 100
	@echo "√âvaluation termin√©e! R√©sultats dans ./evaluation_results"

# Inf√©rence interactive
.PHONY: serve
serve:
	@echo "Lancement du mode interactif..."
	$(PYTHON) $(SCRIPTS_DIR)/06_serve.py \
		--model_path $(CHECKPOINTS_DIR)/dpo \
		--mode interactive \
		--template chatml \
		--temperature 0.7 \
		--max_new_tokens 150

# Serveur API
.PHONY: serve-api
serve-api:
	@echo "Lancement du serveur API..."
	$(PYTHON) $(SCRIPTS_DIR)/06_serve.py \
		--model_path $(CHECKPOINTS_DIR)/dpo \
		--mode api \
		--host 127.0.0.1 \
		--port 8000

# Pipeline complet pour mod√®le tiny
.PHONY: pipeline-tiny
pipeline-tiny: prepare pretrain-tiny
	@echo "Pipeline complet tiny termin√©!"

# Pipeline complet avec fine-tuning (n√©cessite les datasets SFT et DPO)
.PHONY: pipeline-full
pipeline-full: prepare pretrain-tiny sft dpo evaluate serve
	@echo "Pipeline complet termin√©! Mod√®le pr√™t √† l'usage."

# Commandes de reprise depuis checkpoint
.PHONY: resume-pretrain-tiny
resume-pretrain-tiny:
	@echo "Reprise du pr√©-entra√Ænement tiny depuis le dernier checkpoint..."
	$(ACCELERATE) $(SCRIPTS_DIR)/02_pretrain.py \
		--config $(TINY_CONFIG) \
		--data_path $(PROCESSED_DATA) \
		--output_dir $(CHECKPOINTS_DIR)/pretrain/tiny \
		--resume_from_checkpoint $(CHECKPOINTS_DIR)/pretrain/tiny/step_* \
		--learning_rate 3e-4 \
		--batch_size 16 \
		--gradient_accumulation_steps 4

# Test rapide avec donn√©es synth√©tiques
.PHONY: test-pipeline
test-pipeline:
	@echo "Test du pipeline avec donn√©es synth√©tiques..."
	@mkdir -p $(DATA_DIR)/test
	@echo '[[1, 2, 3, 4, 5]]' > $(DATA_DIR)/test/tokenized_data.json
	$(PYTHON) $(SCRIPTS_DIR)/02_pretrain.py \
		--config $(TINY_CONFIG) \
		--data_path $(DATA_DIR)/test/tokenized_data.json \
		--output_dir $(CHECKPOINTS_DIR)/test \
		--max_steps 10 \
		--logging_steps 5
	@echo "Test termin√©!"

# G√©n√©ration d'exemples de datasets
.PHONY: create-sample-datasets
create-sample-datasets:
	@echo "Cr√©ation d'exemples de datasets..."
	@mkdir -p $(DATA_DIR)
	@echo '[' > $(SFT_DATASET)
	@echo '  {"prompt": "Qu'\''est-ce que l'\''IA ?", "response": "L'\''intelligence artificielle est..."},' >> $(SFT_DATASET)
	@echo '  {"prompt": "Comment √ßa marche ?", "response": "Cela fonctionne gr√¢ce √†..."}' >> $(SFT_DATASET)
	@echo ']' >> $(SFT_DATASET)
	
	@echo '[' > $(DPO_DATASET)
	@echo '  {"prompt": "Explique l'\''IA", "chosen": "L'\''IA est une technologie fascinante...", "rejected": "Je sais pas."},' >> $(DPO_DATASET)
	@echo '  {"prompt": "Comment apprendre ?", "chosen": "Il faut √©tudier r√©guli√®rement...", "rejected": "C'\''est facile."}' >> $(DPO_DATASET)
	@echo ']' >> $(DPO_DATASET)
	@echo "Datasets d'exemple cr√©√©s!"

# Monitoring des ressources pendant l'entra√Ænement
.PHONY: monitor
monitor:
	@echo "Surveillance des ressources syst√®me..."
	watch -n 2 'nvidia-smi | head -15; echo ""; ps aux | grep python | head -5; echo ""; df -h | head -5'

# Nettoyage
.PHONY: clean
clean:
	@echo "Nettoyage des fichiers temporaires..."
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -exec rm -rf {} +
	find . -type f -name "*.log" -delete
	find . -type f -name ".DS_Store" -delete
	@echo "Nettoyage termin√©!"

.PHONY: clean-checkpoints
clean-checkpoints:
	@echo "Suppression des checkpoints..."
	rm -rf $(CHECKPOINTS_DIR)
	@echo "Checkpoints supprim√©s!"

# V√©rification de l'environnement
.PHONY: check-env
check-env:
	@echo "V√©rification de l'environnement..."
	@$(PYTHON) -c "import torch; print(f'PyTorch: {torch.__version__}')"
	@$(PYTHON) -c "import torch; print(f'CUDA disponible: {torch.cuda.is_available()}')"
	@$(PYTHON) -c "import transformers; print(f'Transformers: {transformers.__version__}')"
	@$(PYTHON) -c "import accelerate; print(f'Accelerate: {accelerate.__version__}')"
	@echo "V√©rification termin√©e!"

# Configuration pour diff√©rentes tailles de GPU
.PHONY: config-rtx4090
config-rtx4090:
	@echo "Configuration optimis√©e pour RTX 4090 (16 GB)..."
	@echo "Utilisation des param√®tres recommand√©s pour votre GPU"

# Sauvegarde des configs et mod√®les
.PHONY: backup
backup:
	@echo "Sauvegarde des configurations et checkpoints importants..."
	@mkdir -p ./backups/$(shell date +%Y%m%d_%H%M%S)
	cp -r $(CONFIG_DIR) ./backups/$(shell date +%Y%m%d_%H%M%S)/
	@if [ -d "$(CHECKPOINTS_DIR)/pretrain/tiny/final" ]; then \
		cp -r $(CHECKPOINTS_DIR)/pretrain/tiny/final ./backups/$(shell date +%Y%m%d_%H%M%S)/model_final; \
	fi
	@echo "Sauvegarde termin√©e dans ./backups/"

# ============================================================================
# SESSIONS DE D√âVELOPPEMENT FOCALIS√âES
# ============================================================================

# Session rapide (30 minutes) - Test et validation
.PHONY: session-quick
session-quick:
	@echo "üöÄ SESSION RAPIDE (30 min) - Test pipeline"
	@echo "D√©but: $(shell date)"
	@mkdir -p $(SESSION_DIR)
	@echo "=== SESSION QUICK $(shell date) ===" > $(SESSION_LOG)
	$(MAKE) check-env 2>&1 | tee -a $(SESSION_LOG)
	$(MAKE) create-sample-datasets 2>&1 | tee -a $(SESSION_LOG)
	$(MAKE) test-pipeline 2>&1 | tee -a $(SESSION_LOG)
	$(MAKE) evaluate-quick 2>&1 | tee -a $(SESSION_LOG)
	@echo "üéâ Session rapide termin√©e! Log: $(SESSION_LOG)"
	@echo "Dur√©e estim√©e: 30 minutes"

# Session prototype (2 heures) - D√©veloppement tiny model
.PHONY: session-prototype  
session-prototype:
	@echo "üõ†Ô∏è SESSION PROTOTYPE (2h) - Tiny model complet"
	@echo "D√©but: $(shell date)"
	@mkdir -p $(SESSION_DIR)
	@echo "=== SESSION PROTOTYPE $(shell date) ===" > $(SESSION_LOG)
	$(MAKE) check-env 2>&1 | tee -a $(SESSION_LOG)
	@if [ ! -f "$(PROCESSED_DATA)" ]; then $(MAKE) prepare-quick 2>&1 | tee -a $(SESSION_LOG); fi
	$(MAKE) pretrain-tiny-quick 2>&1 | tee -a $(SESSION_LOG)
	$(MAKE) evaluate-quick 2>&1 | tee -a $(SESSION_LOG)
	$(MAKE) validate-architecture 2>&1 | tee -a $(SESSION_LOG)
	@echo "üéâ Session prototype termin√©e! Log: $(SESSION_LOG)"
	@echo "Mod√®le disponible: $(CHECKPOINTS_DIR)/pretrain/tiny/final"

# Session exp√©rimentation (4 heures) - Small model avec fine-tuning
.PHONY: session-experiment
session-experiment:
	@echo "üß™ SESSION EXP√âRIMENTATION (4h) - Small model + SFT"
	@echo "D√©but: $(shell date)"
	@mkdir -p $(SESSION_DIR)
	@echo "=== SESSION EXPERIMENT $(shell date) ===" > $(SESSION_LOG)
	$(MAKE) check-env 2>&1 | tee -a $(SESSION_LOG)
	@if [ ! -f "$(PROCESSED_DATA)" ]; then $(MAKE) prepare 2>&1 | tee -a $(SESSION_LOG); fi
	$(MAKE) pretrain-small 2>&1 | tee -a $(SESSION_LOG)
	$(MAKE) create-sample-datasets 2>&1 | tee -a $(SESSION_LOG)
	$(MAKE) sft-small 2>&1 | tee -a $(SESSION_LOG)
	$(MAKE) evaluate 2>&1 | tee -a $(SESSION_LOG)
	$(MAKE) assess-performance 2>&1 | tee -a $(SESSION_LOG)
	@echo "üéâ Session exp√©rimentation termin√©e! Log: $(SESSION_LOG)"
	@echo "Mod√®le disponible: $(CHECKPOINTS_DIR)/sft"

# Session √©valuation (1 heure) - Analyse approfondie
.PHONY: session-evaluation
session-evaluation:
	@echo "üìä SESSION √âVALUATION (1h) - Analyse compl√®te"
	@echo "D√©but: $(shell date)"
	@mkdir -p $(SESSION_DIR)
	@echo "=== SESSION EVALUATION $(shell date) ===" > $(SESSION_LOG)
	@echo "Recherche du dernier mod√®le entra√Æn√©..."
	@if [ -d "$(CHECKPOINTS_DIR)/dpo" ]; then \
		echo "√âvaluation du mod√®le DPO" | tee -a $(SESSION_LOG); \
		$(MAKE) MODEL_PATH=$(CHECKPOINTS_DIR)/dpo evaluate-detailed 2>&1 | tee -a $(SESSION_LOG); \
	elif [ -d "$(CHECKPOINTS_DIR)/sft" ]; then \
		echo "√âvaluation du mod√®le SFT" | tee -a $(SESSION_LOG); \
		$(MAKE) MODEL_PATH=$(CHECKPOINTS_DIR)/sft evaluate-detailed 2>&1 | tee -a $(SESSION_LOG); \
	elif [ -d "$(CHECKPOINTS_DIR)/pretrain/tiny/final" ]; then \
		echo "√âvaluation du mod√®le tiny" | tee -a $(SESSION_LOG); \
		$(MAKE) MODEL_PATH=$(CHECKPOINTS_DIR)/pretrain/tiny/final evaluate-detailed 2>&1 | tee -a $(SESSION_LOG); \
	else \
		echo "‚ùå Aucun mod√®le trouv√© pour √©valuation" | tee -a $(SESSION_LOG); \
	fi
	$(MAKE) assess-performance 2>&1 | tee -a $(SESSION_LOG) || true
	@echo "üéâ Session √©valuation termin√©e! Log: $(SESSION_LOG)"

# Session debug interactive
.PHONY: session-debug
session-debug:
	@echo "üîß SESSION DEBUG - Mode interactif"
	@echo "=== OPTIONS DISPONIBLES ==="
	@echo "1. V√©rifier l'environnement: make check-env"
	@echo "2. Tester avec donn√©es synth√©tiques: make test-pipeline"
	@echo "3. Valider une architecture: make validate-architecture"
	@echo "4. √âvaluation rapide: make evaluate-quick"
	@echo "5. Surveillance ressources: make monitor"
	@echo "6. Nettoyer et red√©marrer: make clean"
	@echo "7. Lister les checkpoints: ls -la $(CHECKPOINTS_DIR)/*/"
	@echo ""
	@echo "üìù Pour des logs d√©taill√©s, ajoutez 2>&1 | tee debug.log"
	@echo "Exemple: make check-env 2>&1 | tee debug.log"

# Session validation architecture
.PHONY: session-architecture
session-architecture:
	@echo "üèóÔ∏è SESSION ARCHITECTURE - Validation des configurations"
	@mkdir -p $(SESSION_DIR)
	@echo "=== SESSION ARCHITECTURE $(shell date) ===" > $(SESSION_LOG)
	@echo "Validation de toutes les configurations..."
	@for config in $(CONFIG_DIR)/*.json; do \
		echo "Validation: $$config" | tee -a $(SESSION_LOG); \
		$(PYTHON) utils/validate_architecture.py "$$config" 2>&1 | tee -a $(SESSION_LOG); \
		echo "" | tee -a $(SESSION_LOG); \
	done
	@echo "üéâ Validation architecturale termin√©e! Log: $(SESSION_LOG)"

# ============================================================================
# COMMANDES DE SUPPORT POUR LES SESSIONS
# ============================================================================

# Pr√©paration rapide des donn√©es (dataset plus petit)
.PHONY: prepare-quick
prepare-quick:
	@echo "Pr√©paration rapide des donn√©es..."
	@mkdir -p $(DATA_DIR)/processed
	$(PYTHON) $(SCRIPTS_DIR)/01_prepare_data.py \
		--input_path "wikitext-2-raw-v1" \
		--output_dir $(DATA_DIR)/processed \
		--vocab_size 32768 \
		--min_length 50 \
		--max_length 1000
	@echo "Donn√©es rapides pr√©par√©es!"

# Pr√©-entra√Ænement tiny rapide (moins d'epochs)
.PHONY: pretrain-tiny-quick
pretrain-tiny-quick:
	@echo "Pr√©-entra√Ænement tiny rapide (version courte)..."
	@mkdir -p $(CHECKPOINTS_DIR)/pretrain/tiny
	$(ACCELERATE) $(SCRIPTS_DIR)/02_pretrain.py \
		--config $(TINY_CONFIG) \
		--data_path $(PROCESSED_DATA) \
		--output_dir $(CHECKPOINTS_DIR)/pretrain/tiny \
		--learning_rate 5e-4 \
		--batch_size 16 \
		--gradient_accumulation_steps 4 \
		--max_steps 1000 \
		--warmup_steps 100 \
		--save_steps 500 \
		--logging_steps 50
	@echo "Pr√©-entra√Ænement tiny rapide termin√©!"

# SFT pour small model
.PHONY: sft-small
sft-small:
	@echo "Fine-tuning supervis√© pour mod√®le small..."
	@mkdir -p $(CHECKPOINTS_DIR)/sft
	$(PYTHON) $(SCRIPTS_DIR)/03_sft.py \
		--model_path $(CHECKPOINTS_DIR)/pretrain/small/final \
		--dataset_path $(SFT_DATASET) \
		--config_path $(SFT_CONFIG) \
		--output_dir $(CHECKPOINTS_DIR)/sft
	@echo "Fine-tuning supervis√© (small) termin√©!"

# √âvaluation rapide pour d√©veloppement
.PHONY: evaluate-quick
evaluate-quick:
	@echo "√âvaluation rapide..."
	@mkdir -p ./evaluation_results
	$(PYTHON) $(SCRIPTS_DIR)/05_evaluate.py \
		--model_path $(or $(MODEL_PATH),$(CHECKPOINTS_DIR)/pretrain/tiny/final) \
		--output_dir ./evaluation_results \
		--fast_mode \
		--max_boolq_samples 20
	@echo "√âvaluation rapide termin√©e!"

# √âvaluation d√©taill√©e avec rapport
.PHONY: evaluate-detailed
evaluate-detailed:
	@echo "√âvaluation d√©taill√©e avec rapport..."
	@mkdir -p ./evaluation_results
	$(PYTHON) $(SCRIPTS_DIR)/05_evaluate.py \
		--model_path $(or $(MODEL_PATH),$(CHECKPOINTS_DIR)/dpo) \
		--output_dir ./evaluation_results \
		--detailed_output \
		--max_boolq_samples 100
	@echo "√âvaluation d√©taill√©e termin√©e!"

# Analyse automatique des performances
.PHONY: assess-performance
assess-performance:
	@echo "Analyse des performances..."
	@if [ -f "./evaluation_results/evaluation_results.json" ]; then \
		$(PYTHON) $(EVALUATION_DIR)/assess_performance.py ./evaluation_results/evaluation_results.json; \
	else \
		echo "‚ùå Fichier d'√©valuation non trouv√©. Lancez 'make evaluate' d'abord."; \
	fi

# Validation de l'architecture
.PHONY: validate-architecture
validate-architecture:
	@echo "Validation de l'architecture..."
	@if [ -n "$(CONFIG)" ]; then \
		$(PYTHON) utils/validate_architecture.py $(CONFIG); \
	else \
		$(PYTHON) utils/validate_architecture.py $(TINY_CONFIG); \
	fi

# Statut de session - montre l'√©tat actuel
.PHONY: session-status
session-status:
	@echo "üìä STATUT DE LA SESSION"
	@echo "========================================"
	@echo "Heure actuelle: $(shell date)"
	@echo "Dossier de travail: $(PWD)"
	@echo ""
	@echo "üìÅ Donn√©es disponibles:"
	@if [ -f "$(PROCESSED_DATA)" ]; then echo "  ‚úÖ Donn√©es pr√©par√©es"; else echo "  ‚ùå Donn√©es non pr√©par√©es (make prepare)"; fi
	@echo ""
	@echo "ü§ñ Mod√®les disponibles:"
	@if [ -d "$(CHECKPOINTS_DIR)/pretrain/tiny/final" ]; then echo "  ‚úÖ Tiny model"; else echo "  ‚ùå Tiny model non entra√Æn√©"; fi
	@if [ -d "$(CHECKPOINTS_DIR)/pretrain/small/final" ]; then echo "  ‚úÖ Small model"; else echo "  ‚ùå Small model non entra√Æn√©"; fi
	@if [ -d "$(CHECKPOINTS_DIR)/pretrain/base/final" ]; then echo "  ‚úÖ Base model"; else echo "  ‚ùå Base model non entra√Æn√©"; fi
	@if [ -d "$(CHECKPOINTS_DIR)/sft" ]; then echo "  ‚úÖ Mod√®le SFT"; else echo "  ‚ùå Mod√®le SFT non entra√Æn√©"; fi
	@if [ -d "$(CHECKPOINTS_DIR)/dpo" ]; then echo "  ‚úÖ Mod√®le DPO"; else echo "  ‚ùå Mod√®le DPO non entra√Æn√©"; fi
	@echo ""
	@echo "üìä √âvaluations:"
	@if [ -f "./evaluation_results/evaluation_results.json" ]; then echo "  ‚úÖ R√©sultats d'√©valuation disponibles"; else echo "  ‚ùå Pas d'√©valuation r√©cente"; fi
	@echo ""
	@echo "üíæ Espace disque:"
	@du -sh $(CHECKPOINTS_DIR) 2>/dev/null || echo "  Pas de checkpoints"
	@echo ""
	@echo "üî• GPU Status:"
	@nvidia-smi --query-gpu=memory.used,memory.total,utilization.gpu --format=csv,noheader,nounits 2>/dev/null | head -1 || echo "  GPU non disponible"

# Nettoyage de session (garde les mod√®les importants)
.PHONY: session-cleanup
session-cleanup:
	@echo "üßπ Nettoyage de session..."
	@$(MAKE) clean
	@rm -rf $(DATA_DIR)/test
	@find $(SESSION_DIR) -name "*.log" -mtime +7 -delete 2>/dev/null || true
	@echo "Nettoyage termin√© (mod√®les conserv√©s)!"